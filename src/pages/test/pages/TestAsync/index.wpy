<style lang="less" src="./index.less">

</style>

<template>
  <view>This is TestAsync.......page.</view>
  <button bindtap="HandleAwait">使用await - 函数内正常书写</button>
  <button bindtap="HandleAwaitPromise">使用await - 函数内返回Promise</button>
  <button bindtap="HandlePromise">使用Promise</button>

</template>

<script lang="typescript">
  import wepy from 'wepy'

  export default class TestAsync extends wepy.page {
    data = {
      msg: ''
    };

    /// ///////////////////////////////////////////////
    // 生命周期函数
    /// ///////////////////////////////////////////////
    async onLoad() {
      wx.setNavigationBarTitle({
        title: '测试异步'
      })
    }

    /// ///////////////////////////////////////////////
    // 绑定事件函数
    /// ///////////////////////////////////////////////
    async HandleAwait() {
      console.log('Handle Await.start')
      const funR1 = await this.fun1()   // 等待2s
      console.log('Handle Await.fun1', funR1)
      const funR2 = await this.fun2()   // 等待1s
      console.log('Handle Await.fun2', funR2)
      const funR3 = await this.fun3()   // 等待3s
      console.log('Handle Await.end', funR3)
    }

    async fun1() {
      let aaa = 1
      setTimeout(() => {
        console.log('fun1.2000ms')
        aaa = 2000
      }, 2000)
      return aaa
    }

    async fun2() {
      let aaa = 2
      setTimeout(() => {
        console.log('fun2.1000ms')
        aaa = 1000
      }, 1000)
      return aaa
    }

    async fun3() {
      let aaa = 3
      setTimeout(() => {
        console.log('fun3.3000ms')
        aaa = 3000
      }, 3000)
      return aaa
    }

    async HandleAwaitPromise() {
      console.log('Handle Await Promise.start')
      const funR1 = await this.fun1promise().catch((err) => {
        console.log(err)
      })   // 等待2s
      console.log('Handle Await Promise.fun1', funR1)
      const funR2 = await this.fun2promise().catch((err) => {
        console.log(err)
      })    // 等待1s
      console.log('Handle Await Promise.fun2', funR2)
      const funR3 = await this.fun3promise().catch((err) => {
        console.log(err)
      })    // 等待3s
      console.log('Handle Await Promise.end', funR3)
    }

    async fun1promise() {
      let aaa = 1
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          console.log('fun1.2000ms')
          aaa = 2000
          reject(aaa)
        }, 2000)
      })
    }

    async fun2promise() {
      let aaa = 2
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          console.log('fun2.1000ms')
          aaa = 1000
          resolve(aaa)
        }, 1000)
      })
    }

    async fun3promise() {
      let aaa = 3
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          console.log('fun3.3000ms')
          aaa = 3000
          reject(aaa)
        }, 3000)
      })
    }

    async HandlePromise() {
      console.log('Handle Promise.start')
      Promise.all([this.fun1(), this.fun3()]).then(() => {
        console.log('Promise 1.3.end')
      })
      this.fun2()
      console.log('Handle Promise.end')
    }

    /// ///////////////////////////////////////////////
    // 自定义函数
    /// ///////////////////////////////////////////////
  }
</script>
